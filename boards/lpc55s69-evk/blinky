// boards/lpc55s69-evk/src/main.rs

#![no_std]
#![no_main]
// Add the checksum feature
//#![feature(linkage)]
//#[linkage = "weak"]
//#[no_mangle]
//static __checksum: u32 = 0;

use panic_halt as _;

use core::ptr::write_volatile;
use cortex_m::asm;

// Import your HAL drivers
use lpc55s6x::gpio::{Configure, GpioPin, LPCPin, Output};
use lpc55s6x::iocon::{Config, Function, Iocon, Pull, Slew};

#[no_mangle]
#[link_section = ".stack_buffer"]
pub static mut STACK_MEMORY: [u8; 0x2000] = [0; 0x2000];

// --- Manual Register Definitions for System Initialization ---
const SYSCON_BASE: usize = 0x5000_0000; // Secure alias for SYSCON
const AHBCLKCTRLSET0_ADDR: *mut u32 = (SYSCON_BASE + 0x208) as *mut u32;

// These are the bitmasks from the C code's SystemInit()
const SRAM1_CLK: u32 = 1 << 5; // Corresponds to SRAM_CTRL1
const SRAM2_CLK: u32 = 1 << 6; // Corresponds to SRAM_CTRL2
const SRAM3_CLK: u32 = 1 << 7; // Corresponds to SRAM_CTRL3
const SRAM4_CLK: u32 = 1 << 8; // Corresponds to SRAM_CTRL4
const IOCON_CLK: u32 = 1 << 13;
const GPIO1_CLK: u32 = 1 << 15;

// This function is marked with `#[pre_init]`.
// `cortex-m-rt` will execute this function BEFORE it initializes RAM (.data and .bss)
// and before it calls main. This is our Rust equivalent of `SystemInit`.
unsafe fn system_init() {
    // This is the absolute first code to run.
    // We enable clocks for all the peripherals we will need, especially SRAM.
    // If we don't enable SRAM clocks, the program will fault when the runtime
    // tries to set up the stack.
    write_volatile(
        AHBCLKCTRLSET0_ADDR,
        SRAM1_CLK | SRAM2_CLK | SRAM3_CLK | SRAM4_CLK | IOCON_CLK | GPIO1_CLK,
    );

    // Add a memory barrier to ensure all writes are committed before proceeding.
    asm::dmb();
    asm::isb();
}

#[no_mangle]
fn main() -> ! {
    // By the time we get here, `system_init` has already run.
    // All necessary clocks are enabled.
    unsafe {
        system_init();
    }
    // 1. Configure the pin function using your IOCON driver.
    let iocon_ctrl = Iocon::new();
    let led_pin_config = Config {
        function: Function::GPIO,
        pull: Pull::Up,
        slew: Slew::Standard,
        invert: false,
        digital_mode: true,
        open_drain: false,
    };
    iocon_ctrl.configure_pin(LPCPin::P1_4, led_pin_config);

    // 2. Get a handle to the GPIO pin, set its direction, and initial state.
    let blue_led = GpioPin::new(LPCPin::P1_4);
    blue_led.make_output();
    blue_led.set(); // Start with the LED off

    // --- MAIN LOOP ---
    loop {
        blue_led.toggle();
        delay_ms(1000);
    }
}

// Delay loop tuned for the default 12 MHz clock.
fn delay_ms(ms: u32) {
    for _ in 0..ms {
        for _ in 0..3000 {
            asm::nop();
        }
    }
}

